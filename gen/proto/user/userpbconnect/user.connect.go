// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/user/user.proto

package userpbconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect_go "github.com/bufbuild/connect-go"
	userpb "github.com/midepeter/thrift/gen/proto/user"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserName is the fully-qualified name of the User service.
	UserName = "user.User"
)

// UserClient is a client for the user.User service.
type UserClient interface {
	Register(context.Context, *connect_go.Request[userpb.RegisterUser]) (*connect_go.Response[userpb.UserResponse], error)
	SignIn(context.Context, *connect_go.Request[userpb.UserRequest]) (*connect_go.Response[userpb.SignInResponse], error)
	SignOut(context.Context, *connect_go.Request[userpb.UserRequest]) (*connect_go.Response[userpb.UserResponse], error)
}

// NewUserClient constructs a client for the user.User service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userClient{
		register: connect_go.NewClient[userpb.RegisterUser, userpb.UserResponse](
			httpClient,
			baseURL+"/user.User/Register",
			opts...,
		),
		signIn: connect_go.NewClient[userpb.UserRequest, userpb.SignInResponse](
			httpClient,
			baseURL+"/user.User/SignIn",
			opts...,
		),
		signOut: connect_go.NewClient[userpb.UserRequest, userpb.UserResponse](
			httpClient,
			baseURL+"/user.User/SignOut",
			opts...,
		),
	}
}

// userClient implements UserClient.
type userClient struct {
	register *connect_go.Client[userpb.RegisterUser, userpb.UserResponse]
	signIn   *connect_go.Client[userpb.UserRequest, userpb.SignInResponse]
	signOut  *connect_go.Client[userpb.UserRequest, userpb.UserResponse]
}

// Register calls user.User.Register.
func (c *userClient) Register(ctx context.Context, req *connect_go.Request[userpb.RegisterUser]) (*connect_go.Response[userpb.UserResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// SignIn calls user.User.SignIn.
func (c *userClient) SignIn(ctx context.Context, req *connect_go.Request[userpb.UserRequest]) (*connect_go.Response[userpb.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// SignOut calls user.User.SignOut.
func (c *userClient) SignOut(ctx context.Context, req *connect_go.Request[userpb.UserRequest]) (*connect_go.Response[userpb.UserResponse], error) {
	return c.signOut.CallUnary(ctx, req)
}

// UserHandler is an implementation of the user.User service.
type UserHandler interface {
	Register(context.Context, *connect_go.Request[userpb.RegisterUser]) (*connect_go.Response[userpb.UserResponse], error)
	SignIn(context.Context, *connect_go.Request[userpb.UserRequest]) (*connect_go.Response[userpb.SignInResponse], error)
	SignOut(context.Context, *connect_go.Request[userpb.UserRequest]) (*connect_go.Response[userpb.UserResponse], error)
}

// NewUserHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserHandler(svc UserHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/user.User/Register", connect_go.NewUnaryHandler(
		"/user.User/Register",
		svc.Register,
		opts...,
	))
	mux.Handle("/user.User/SignIn", connect_go.NewUnaryHandler(
		"/user.User/SignIn",
		svc.SignIn,
		opts...,
	))
	mux.Handle("/user.User/SignOut", connect_go.NewUnaryHandler(
		"/user.User/SignOut",
		svc.SignOut,
		opts...,
	))
	return "/user.User/", mux
}

// UnimplementedUserHandler returns CodeUnimplemented from all methods.
type UnimplementedUserHandler struct{}

func (UnimplementedUserHandler) Register(context.Context, *connect_go.Request[userpb.RegisterUser]) (*connect_go.Response[userpb.UserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.User.Register is not implemented"))
}

func (UnimplementedUserHandler) SignIn(context.Context, *connect_go.Request[userpb.UserRequest]) (*connect_go.Response[userpb.SignInResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.User.SignIn is not implemented"))
}

func (UnimplementedUserHandler) SignOut(context.Context, *connect_go.Request[userpb.UserRequest]) (*connect_go.Response[userpb.UserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.User.SignOut is not implemented"))
}
