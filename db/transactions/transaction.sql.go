// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: transaction.sql

package transactions

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  transaction_id,
  user_id,
  currency_id,
  transaction_amount,
  transaction_date
) VALUES ($1, $2, $3, $4, $5)
RETURNING transaction_id, user_id, currency_id, transaction_amount, transaction_date
`

type CreateTransactionParams struct {
	TransactionID     string
	UserID            int32
	CurrencyID        int32
	TransactionAmount pgtype.Numeric
	TransactionDate   sql.NullTime
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.TransactionID,
		arg.UserID,
		arg.CurrencyID,
		arg.TransactionAmount,
		arg.TransactionDate,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.CurrencyID,
		&i.TransactionAmount,
		&i.TransactionDate,
	)
	return i, err
}

const getBalance = `-- name: GetBalance :one
SELECT user_id, currency_id, balance_amount, transaction_count FROM balances
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetBalance(ctx context.Context, userID int32) (Balance, error) {
	row := q.db.QueryRow(ctx, getBalance, userID)
	var i Balance
	err := row.Scan(
		&i.UserID,
		&i.CurrencyID,
		&i.BalanceAmount,
		&i.TransactionCount,
	)
	return i, err
}
