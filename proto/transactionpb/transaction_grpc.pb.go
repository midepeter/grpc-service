// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: transaction.proto

package transactionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionsClient is the client API for Transactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsClient interface {
	Deposit(ctx context.Context, opts ...grpc.CallOption) (Transactions_DepositClient, error)
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	Withdraw(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
}

type transactionsClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsClient(cc grpc.ClientConnInterface) TransactionsClient {
	return &transactionsClient{cc}
}

func (c *transactionsClient) Deposit(ctx context.Context, opts ...grpc.CallOption) (Transactions_DepositClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transactions_ServiceDesc.Streams[0], "/transaction.Transactions/Deposit", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionsDepositClient{stream}
	return x, nil
}

type Transactions_DepositClient interface {
	Send(*DepositRequest) error
	CloseAndRecv() (*DepositResponse, error)
	grpc.ClientStream
}

type transactionsDepositClient struct {
	grpc.ClientStream
}

func (x *transactionsDepositClient) Send(m *DepositRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transactionsDepositClient) CloseAndRecv() (*DepositResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DepositResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionsClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactions/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) Withdraw(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactions/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServer is the server API for Transactions service.
// All implementations must embed UnimplementedTransactionsServer
// for forward compatibility
type TransactionsServer interface {
	Deposit(Transactions_DepositServer) error
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	Withdraw(context.Context, *WithdrawalRequest) (*WithdrawalResponse, error)
	mustEmbedUnimplementedTransactionsServer()
}

// UnimplementedTransactionsServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionsServer struct {
}

func (UnimplementedTransactionsServer) Deposit(Transactions_DepositServer) error {
	return status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedTransactionsServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedTransactionsServer) Withdraw(context.Context, *WithdrawalRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedTransactionsServer) mustEmbedUnimplementedTransactionsServer() {}

// UnsafeTransactionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServer will
// result in compilation errors.
type UnsafeTransactionsServer interface {
	mustEmbedUnimplementedTransactionsServer()
}

func RegisterTransactionsServer(s grpc.ServiceRegistrar, srv TransactionsServer) {
	s.RegisterService(&Transactions_ServiceDesc, srv)
}

func _Transactions_Deposit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionsServer).Deposit(&transactionsDepositServer{stream})
}

type Transactions_DepositServer interface {
	SendAndClose(*DepositResponse) error
	Recv() (*DepositRequest, error)
	grpc.ServerStream
}

type transactionsDepositServer struct {
	grpc.ServerStream
}

func (x *transactionsDepositServer) SendAndClose(m *DepositResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transactionsDepositServer) Recv() (*DepositRequest, error) {
	m := new(DepositRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transactions_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactions/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactions/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).Withdraw(ctx, req.(*WithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transactions_ServiceDesc is the grpc.ServiceDesc for Transactions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transactions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.Transactions",
	HandlerType: (*TransactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _Transactions_Lock_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Transactions_Withdraw_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Deposit",
			Handler:       _Transactions_Deposit_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "transaction.proto",
}
